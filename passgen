#!/usr/bin/ruby -w

require 'optparse'

options = {}

# Parse command line options
optparse = OptionParser.new do|opts|
    opts.banner = "Usage: passgen [options] [number of passwords to generate]"

    options[:numbers] = false
    opts.on( '-n', '--numbers', 'Exclude numbers' ) do
        options[:numbers] = true
    end

    options[:uppercase] = false
    opts.on( '-u', '--uppercase', 'Exclude uppercase' ) do
        options[:uppercase] = true
    end

    options[:lowercase] = false
    opts.on( '-l', '--lowercase', 'Exclude lowercase' ) do
        options[:lowercase] = true
    end

    options[:symbols] = false
    opts.on( '-s', '--symbols', 'Exclude symbols' ) do
        options[:symbols] = true
    end

    options[:ambiguous] = false
    opts.on( '-a', '--ambiguous', 'Exclude (possibly) ambiguous' ) do
        options[:ambiguous] = true
    end

    options[:quantity] = 1 
    opts.on( '-q', '--quantity [num]', Integer, 'Number of passwords to generate' ) do|quantity|
        options[:quantity] = quantity
    end

    opts.on( '-h', '--help', 'Display this screen' ) do
        puts opts
        exit
    end
end

optparse.parse!

# Generates a password
def generate(charlist, length=10)
    password = ''
    (0...length).each do |i|
        password << charlist[Random.rand(charlist.length)]
    end
    return password
end

def buildCharList(options)
    charlist = ('!'..'~').to_a.join
    charlist.sub!(/\p{Upper}+/,'') if options[:uppercase]
    charlist.sub!(/\p{Lower}+/,'') if options[:lowercase]
    charlist.sub!(/\p{Digit}+/,'') if options[:numbers]
    charlist.gsub!(/\p{Punct}+/,'') if options[:symbols]
    charlist.gsub!(/[1IlO0]+/  ,'') if options[:ambiguous]

    return charlist;
end

# Main script
if __FILE__ == $0
    charlist = buildCharList(options)

    # If so many exclusion switches are turned on, we won't have any 
    # password characters to make passwords with.
    if charlist.length <= 0
        puts "No characters left in character pool."
        exit
    end

    passLength = ARGV.length < 1 ? 10 : Integer(ARGV[0])
    (0...options[:quantity]).each do |i|
        puts generate(charlist, passLength)
    end
end
